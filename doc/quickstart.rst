
==========
Quickstart
==========

To run a mesas.py model, you must first construct three pieces of input:

 - Timeseries of the system inputs and outputs, and of any time-varying parameters, stored in a `Pandas <https://pandas.pydata.org/>`_ dataframe.
 - A specification of the SAS function, stored in a dict.
 - A specification of any solute parameters, also stored in a dict.

The ``data_df`` dataframe
=========================

The dataframe contains (at minimum) the timeseries of fluid input, output, and any tracer input timeseries. In addition, almost all SAS function and solute parameters can be time-varying, or they can be fixed values. When they vary in time, they must be a column in the dataframe.

Later we will import data from a .csv file into a dataframe. For now we will construct an artificial one. We will construct it to be 100 timesteps of steady flow at rate ``Q_steady`` through storage volume ``Storage_vol``. The inputs will be labeled with tracer at concentration ``C_tracer_input`` for 10% of the total duration near the start of the timeseries. Let's start by creating some variables to hold this information::

    timeseries_duration = 1.
    timeseries_length = 100
    dt = timeseries_duration/timeseries_length

    pulse_start = 0.05
    pulse_end = 0.15

    C_tracer_input = 0.5
    Q_steady = 1.
    Storage_vol = 0.1

Now we will create the dataframe in pandas::

    import pandas as pd
    import numpy as np
    data_df = pd.DataFrame(index=np.arange(timeseries_length) * dt)
    data_df['Q out [vol/time]'] = Q_steady
    data_df['J in [vol/time]'] = Q_steady
    data_df['C [conc]'] = 0
    data_df.loc[pulse_start:pulse_end, 'C [conc]'] = C_tracer_input

This creates a dataframe data_df that contains the input timeseries.

Specifying the SAS function and solute parameters
=================================================

Next, let's give the specifications of the SAS function, like this::

    sas_specs = {'Q out [vol/time]':
                        {'my first SAS func!':
                             {'ST': [0, Storage_vol] }}}

This specification says the following:

- There is only one flux out, and it can be found under the column ``'Q out [vol/time]'`` in the dataframe.
- There is only one SAS function associated with this flux, and it is called ``'my first SAS func!'``.
- The SAS function is specified as a piecewise linear function with one linear segment from :math:`P=0` at :math:`ST=0` to :math:`P=1` at :math:`ST =` ``Storage_vol``.


The only solute information we need to give is the name of the column containing the input timeseries::

    solute_parameters = {'C [conc]': {}}

The dictionary associated with our solute is empty ``{}``, so the default parameters will be used.

Running mesas.py
================

Now we are ready to import mesas.py, create the model, and run it::

    from mesas.sas.model import Model
    model = Model(data_df, sas_specs=sas_specs, solute_parameters=solute_parameters, dt=dt, influx='J in [vol/time]')
    model.run()

We have passed two additional pieces of information:

- The timestep of the model, ``dt`` (which depends on the units of the inflow and outflow)
- The name of the column in the dataframe that contains the inflow rate, given by the keyword argument ``influx``


Assuming the model runs without incident the predicted discharge concentration has appeared as a new column in the dataframe. The columns generated by the model will have the form ``'<solute column name> --> <flux column name>'``.

Plot the results
================

We can use matplotlib to plot individual columns of the dataframe like this::

    import matplotlib.pyplot as plt
    plt.plot(data_df.index, data_df['C [conc]'])
    plt.plot(data_df.index, data_df['C [conc] --> Q out [vol/time]'])

Which should give this:

.. image:: fig/QS.png
  :width: 700
  :alt: What you should see if you followed the instructions flawlessly


